<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4026.8">
  <POU Name="FB_HydraulicsControl" Id="{0d9c5732-af19-4096-a83e-065687a13da0}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_HydraulicsControl
VAR_INPUT
	enable				: BOOL := FALSE;	// start the hydraulics
	reset				: BOOL;				// reset any hydraulics error
	suctionManual		: BOOL;				// manual override to start the suction pump
	pumpManualStop		: BOOL;				// manual override to stop the pump
	brakeClearing		: BOOL;				// external clearing for brakes
	azimutLimitSwitch	: BOOL;				// external signal for azimuth limit switch
	panLevelMin			: INT := 0;			// minimum oil level from sensor
	panLevelMax			: INT := 16383;		// maximum oil level from sensor
	panPercentMin		: REAL := 0;		// oil level percentage to be seen as empty
	panPercentMax		: REAL := 90;		// oil level percentage to be seen as full
	
END_VAR
VAR_OUTPUT
	brakeOpen			: BOOL;				// status of the brake: is the brake open?
	brakeClosed			: BOOL;				// is the brake closed?
	pressureFailure		: BOOL;				// pump is running, but the pressure remains low
	suctionFailure		: BOOL;				// suction was started, but it is not running
	hydraulicsFailure	: BOOL;				// main pump is running but suction has a timeout
	mainPumpFailure		: BOOL;
	oilLow				: BOOL;				// oil is low
	oilHigh				: BOOL;				// oil is high (unused?)
	oilPressureOK		: BOOL;				// oil pressure is 25 bars
	oilWarning			: BOOL;				// oil is on reserve
	oilFilterDirty		: BOOL;				// oil filter is dirty
	oilCold				: BOOL;				// oil is below 10°C
	oilHot				: BOOL;				// oil is above 50°C
	oilpanMaximum		: BOOL;				// swimmer
	pumpRunning			: BOOL;				// main pump is running
	suctionRunning 		: BOOL := FALSE;	// suction pump is running
	error				: BOOL;				// error condition
END_VAR
VAR
	comm				: I_Comm; 
	inOilLow			AT%I*	: BOOL;	// 2.1
	inOilHigh			AT%I*	: BOOL;	// ?
	inOilPressureOK		AT%I*	: BOOL;	// 2.3
	inOilOvertemperature	AT%I*	: BOOL;	// 2.4
	inOilUndertemperature	AT%I*	: BOOL;	// 2.5
	inOilfilterDirty	AT%I*	: BOOL;	// 2.6
	inPumpRunning		AT%I*	: BOOL;	// 2.7
	inSuctionRunning	AT%I*	: BOOL;	// 2.8
	inOilLevel			AT%I*	: INT;	//BT2
	inOilpanMaximum		AT%I*	: BOOL;	//DIN39 4.6
	inOilReserve		AT%I*	: BOOL;	//DIN40 4.7
	outOilPumpEnable	AT%Q*	: BOOL;	//DOUT4 0.3
	outOilSuctionEnable	AT%Q*	: BOOL; //DOUT5 0.4	
	brakeAzimuthEve		AT%Q*	: BOOL;	// brake set
	resetOilPump		AT%Q*: BOOL;
	resetSucPump		AT%Q*: BOOL;
	
	iOpenBrake			: BOOL := FALSE;	// command to open the brake
	iCloseBrake			: BOOL;				// command to open the brake
	pressureWatchdog	: TON;				// monitors the pressure of the pump is running
	suctionWatchdog		: TON;				// monitors the activation of the suction pump
	mainPumpWatchdog	: TON;				// monitors the activation of the main pump			
	hydraulicsWatchdog	: TON;				// watch the hydraulics and suction pumps
	
	oilPumpState		: RS;				// represents the state of the main pump
	
	brakeState			: RS;				// represents the state of the brake
	brakeOpenDelay		: TON;				// wait for the brake to open after pressure has been established
	brakeOpenedDelay	: TON;				// report brake opend after a short delay
	
	errorState			: SR;				// error state (set dominant)
	suctionTrigger		: SR;				// trigger for suction pump
	hydraulicsOffTimer	: TON  := (PT := T#300S);	// timer to shut off hydraulics after break was closed
	offTrigger			: F_TRIG;
	oilLevel			: REAL;
	lastOilLevel		: REAL;
	hydraulicsLog,
	pumpLog,
	reserveLog,
	oilLowLog,
	filterLog,
	oilMaxLog,
	overTemperatureLog,
	underTemperatureLog,
	suctionLog,
	hydraulicsFailureLog,
	brakeClearingWarning,
	brakeHydraulicsWarning,
	brakeWarning: FB_EventLog;
	
	// measures the operating cycle of the suction pump
	statusWord, lastStatus:	UDINT;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* 
Main control Logic for the Hydraulics system
* power on delay for main pump and suction pump
* start main pump if main control is ready (button pressed or remote)
* start suction pump if maximum in pan is reached
* suction pump runs for 60 seconds
* stop main pump if oil is low
* stop main pump if pressure fails for 10 seconds
*)

// get values from sensors
oilLow 			:= NOT inOilLow;
oilHigh 		:= NOT inOilHigh;
oilWarning 		:= inOilReserve;
oilPressureOK 	:= inOilPressureOK;
oilFilterDirty 	:= NOT inOilfilterDirty;
oilCold 		:= NOT inOilUndertemperature;
oilHot 			:= inOilOvertemperature;
//oil_level 			:= F_YREAL(in_oil_level, 0, 16383, 0.0, 5.0);
oilLevel		:= F_YREAL(inOilLevel, panLevelMin, panLevelMax, 0, 100, cut := FALSE); 
oilpanMaximum	:= inOilpanMaximum;
pumpRunning 	:= inPumpRunning;
suctionRunning 	:= inSuctionRunning;

// reset pumps
resetOilPump := reset;
resetSucPump := reset;

// error state?
errorState(
	SET1 := pressureFailure OR	suctionFailure OR hydraulicsFailure OR oilLow OR mainPumpFailure,
	RESET := reset,
	Q1 => error);
			
// clear reset, if no error present
IF NOT error THEN
	reset := FALSE;
END_IF

// pump state
oilPumpState(
	SET := enable,
	RESET1 := NOT enable OR error OR pumpManualStop OR inOilpanMaximum);

// switch oil pump
outOilPumpEnable := oilPumpState.Q1;

(* This section controls the hydraulic brake responsible for azimuth and elevation. 
Especially the elevation is imbalanced if not in the position control loop. 
The brake must only be opened, if the elevation drive is activated concurrently.
*)

// close the brake if the pump is not running	
IF iCloseBrake OR NOT pumpRunning THEN 
	iOpenBrake := FALSE;
END_IF

// wait for pressure to build up (hack for oil_pressure_ok)
brakeOpenDelay(
	IN := pumpRunning AND oilPressureOK,
	PT := T#3S);
		
brakeState(
	SET := brakeOpenDelay.Q AND iOpenBrake AND brakeClearing,
	RESET1 := azimutLimitSwitch	OR iCloseBrake OR NOT pumpRunning OR NOT brakeClearing,
	Q1 => brakeAzimuthEve);

// signal that the brake is open after one second
brakeOpenedDelay(
	IN := brakeState.Q1, 
	PT := T#1000MS,
	Q  => brakeOpen);

// brake closed?
brakeClosed := NOT brakeOpen;
IF brakeClosed THEN
	iCloseBrake := FALSE;
END_IF

// turn off the hydraulics if the brake is closed and the pump is still running
hydraulicsOffTimer(IN := brakeClosed AND enable );
offTrigger(CLK := hydraulicsOffTimer.Q);
IF hydraulicsOffTimer.Q THEN
	enable := FALSE;
END_IF

(* This is the end of the brake control section *)

suctionTrigger(
	SET1  := oilpanMaximum OR oilLevel>panPercentMax,
	RESET := oilLevel<panPercentMin);
outOilSuctionEnable := suctionTrigger.Q1 OR suctionManual;					
suctionWatchdog(
	IN := outOilSuctionEnable AND NOT suctionRunning,
	PT := T#15S,
	Q  => suctionFailure);
					
pressureWatchdog(
	IN := outOilPumpEnable AND	NOT oilPressureOK,
	PT := T#30S,
	Q  => pressureFailure);
hydraulicsWatchdog(
	IN := pumpRunning AND NOT suctionRunning,
	PT := T#140S,
	Q  => hydraulicsFailure);

mainPumpWatchdog(
	IN := outOilPumpEnable AND NOT pumpRunning,
	PT := T#10S,
	Q  => mainPumpFailure);

statusWord.0 := oilLow;
statusWord.1 := oilHigh;
statusWord.2 := oilWarning;
statusWord.3 := oilPressureOK;
statusWord.4 := oilFilterDirty;
statusWord.5 := oilCold;
statusWord.6 := oilHot;
statusWord.7 := brakeOpen;
statusWord.8 := brakeClearing;
statusWord.9 := pumpRunning;
statusWord.10 := suctionRunning;
statusWord.11 := oilpanMaximum;
statusWord.12 := outOilPumpEnable;
statusWord.13 := outOilSuctionEnable;
IF ABS(lastOilLevel - oilLevel) > 5 THEN
	statusWord.15 := TRUE;
	lastOilLevel := oilLevel;
ELSE
	statusWord.15 := FALSE;
END_IF

IF statusWord<>LastStatus THEN // publish new payload every second
	LastStatus := statusWord;
	comm.Publish('hydraulics', 'base', 'OilLow',		BOOL_TO_STRING(oilLow));
	comm.Publish('hydraulics', 'base', 'OilHigh',		BOOL_TO_STRING(oilHigh));
	comm.Publish('hydraulics', 'base', 'OilMaximum',	BOOL_TO_STRING(oilpanMaximum));
	comm.Publish('hydraulics', 'base', 'OilReserve',	BOOL_TO_STRING(oilWarning));
	comm.Publish('hydraulics', 'base', 'OilPressureOK', BOOL_TO_STRING(oilPressureOK));
	comm.Publish('hydraulics', 'base', 'OilFilterDirty',BOOL_TO_STRING(oilFilterDirty));
	comm.Publish('hydraulics', 'base', 'OilCold',		BOOL_TO_STRING(oilCold));
	comm.Publish('hydraulics', 'base', 'OilHot',		BOOL_TO_STRING(oilHot));
	comm.Publish('hydraulics', 'base', 'BrakeOpen',		BOOL_TO_STRING(brakeOpen));
	comm.Publish('hydraulics', 'base', 'BrakeClearing',	BOOL_TO_STRING(brakeClearing));
	comm.Publish('hydraulics', 'base', 'PumpRunning',	BOOL_TO_STRING(pumpRunning));
	comm.Publish('hydraulics', 'base', 'SuctionRunning',BOOL_TO_STRING(suctionRunning));
	comm.Publish('hydraulics', 'base', 'OilLevel',		REAL_TO_STRING(oilLevel));
	comm.Publish('hydraulics', 'base', 'StatusWord',	UDINT_TO_STRING(statusWord));
END_IF

			  
hydraulicsLog(
	Trigger 		:= pressureFailure OR mainPumpFailure,
	Level 			:= ADSLOG_MSGTYPE_ERROR,
	FormatString 	:= 'Main hydraulics pump / pressure: %s',
	OnMessage 		:= 'FAILURE',
	OffMessage 		:= 'OK',
	OffLevel 		:= ADSLOG_MSGTYPE_HINT, 
	comm 			:= comm);

pumpLog(
	Trigger 		:= pumpRunning,
	Level 			:= ADSLOG_MSGTYPE_HINT,
	FormatString 	:= 'Main hydraulics pump: %s',
	OnMessage 		:= 'START',
	OffMessage 		:= 'STOP',
	OffLevel 		:= ADSLOG_MSGTYPE_HINT, 
	comm 			:= comm);
	
reserveLog(
	Trigger 		:= oilWarning,
	Level 			:= ADSLOG_MSGTYPE_WARN,
	FormatString 	:= 'oil reserve: %s',
	OnMessage 		:= 'LOW',
	OffMessage 		:= 'OK',
	OffLevel 		:= ADSLOG_MSGTYPE_HINT, 
	comm	 		:= comm);

oilLowLog(
	Trigger 		:= oilLow,
	Level 			:= ADSLOG_MSGTYPE_ERROR,
	FormatString 	:= 'oil level: %s',
	OnMessage 		:= 'LOW',
	OffMessage 		:= 'OK',
	OffLevel 		:= ADSLOG_MSGTYPE_HINT, 
	comm 			:= comm);

oilMaxLog(
	Trigger 		:= oilpanMaximum,
	Level 			:= ADSLOG_MSGTYPE_ERROR,
	FormatString 	:= 'oil level: %s',
	OnMessage 		:= 'MAXIMUM',
	OffMessage 		:= 'OK',
	OffLevel 		:= ADSLOG_MSGTYPE_HINT, 
	comm 			:= comm);	
				
filterLog(
	Trigger 		:= oilFilterDirty,
	Level 			:= ADSLOG_MSGTYPE_WARN,
	FormatString 	:= 'Hydraulics Filter is %s',
	OnMessage 		:= 'dirty.', 
	comm 			:= comm);

overTemperatureLog(
	Trigger 		:= oilHot,
	Level 			:= ADSLOG_MSGTYPE_WARN,
	FormatString 	:= 'Hydraulics Temperature is %s',
	OnMessage 		:= 'high.', 
	comm 			:= comm);
				
underTemperatureLog(
	Trigger 		:= oilCold,
	Level 			:= ADSLOG_MSGTYPE_WARN,
	FormatString 	:= 'Hydraulics Temperature is %s',
	OnMessage 		:= 'low.', 
	comm 			:= comm);

suctionLog(
	Trigger 		:= suctionFailure,
	Level 			:= ADSLOG_MSGTYPE_ERROR,
	FormatString 	:= 'suction pump: %s',
	OnMessage 		:= 'FAILURE',
	OffMessage 		:= 'OK',
	OffLevel 		:= ADSLOG_MSGTYPE_HINT, 
	comm 			:= comm);

hydraulicsFailureLog(
	Trigger 		:= hydraulicsFailure,
	Level 			:= ADSLOG_MSGTYPE_ERROR,
	FormatString 	:= 'suction pump while running main pump: %s',
	OnMessage 		:= 'FAILURE',
	OffMessage 		:= 'OK',
	OffLevel 		:= ADSLOG_MSGTYPE_HINT, 
	comm 			:= comm);
				
brakeClearingWarning(
	Trigger 		:= NOT brakeClearing AND iOpenBrake,
	Level 			:= ADSLOG_MSGTYPE_WARN,
	FormatString 	:= '%s',
	OnMessage 		:= 'Cannot open brake without brake clearing.', 
	comm 			:= comm);

brakeWarning(	
	Trigger 		:= brakeOpen,
	Level 			:= ADSLOG_MSGTYPE_WARN,
	FormatString 	:= '%s',
	OnMessage 		:= 'Brake is open.',
	OffMessage 		:= 'Brake is closed.', 
	comm 			:= comm);

brakeHydraulicsWarning(
	Trigger 		:= NOT enable AND iOpenBrake,
	Level 			:= ADSLOG_MSGTYPE_WARN,
	FormatString 	:= '%s',
	OnMessage 		:= 'Cannot open brake without running hydraulics.', 
	comm 			:= comm);]]></ST>
    </Implementation>
    <Method Name="close_brake" Id="{8645e358-9c1d-4f56-a320-d20acf3a9f78}">
      <Declaration><![CDATA[METHOD close_brake : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// close the brake
iCloseBrake := TRUE;

RETURN(brakeClosed);]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_Init" Id="{f8304cff-71fd-40f3-8c17-0d2ac2c6aa2c}">
      <Declaration><![CDATA[//FB_Init is always available implicitly and it is used primarily for initialization.
//The return value is not evaluated. For a specific influence, you can also declare the
//methods explicitly and provide additional code there with the standard initialization
//code. You can evaluate the return value.
METHOD FB_Init: BOOL
VAR_INPUT
    bInitRetains	: BOOL; // TRUE: the retain variables are initialized (reset warm / reset cold)
    bInCopyCode		: BOOL;  // TRUE: the instance will be copied to the copy code afterward (online change)
	comm			: I_Comm;   
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.comm := comm;]]></ST>
      </Implementation>
    </Method>
    <Method Name="open_brake" Id="{803f79af-0083-4059-9845-1aae86bb3efd}">
      <Declaration><![CDATA[METHOD open_brake : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// start the pump
enable := TRUE;
// open the brake
IF oilPressureOK THEN
	iOpenBrake := TRUE;
END_IF;
RETURN(brakeOpen);]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_HydraulicsControl">
      <LineId Id="8751" Count="58" />
      <LineId Id="8989" Count="0" />
      <LineId Id="8810" Count="2" />
      <LineId Id="8990" Count="0" />
      <LineId Id="8813" Count="0" />
      <LineId Id="8817" Count="3" />
      <LineId Id="8991" Count="0" />
      <LineId Id="8821" Count="18" />
      <LineId Id="8992" Count="0" />
      <LineId Id="8840" Count="2" />
      <LineId Id="8993" Count="0" />
      <LineId Id="8843" Count="3" />
      <LineId Id="8994" Count="0" />
      <LineId Id="8847" Count="2" />
      <LineId Id="8995" Count="0" />
      <LineId Id="8850" Count="3" />
      <LineId Id="8996" Count="0" />
      <LineId Id="8854" Count="41" />
      <LineId Id="8897" Count="1" />
      <LineId Id="8997" Count="0" />
      <LineId Id="8899" Count="7" />
      <LineId Id="8999" Count="0" />
      <LineId Id="8907" Count="7" />
      <LineId Id="9000" Count="0" />
      <LineId Id="8915" Count="7" />
      <LineId Id="9001" Count="0" />
      <LineId Id="8923" Count="7" />
      <LineId Id="9002" Count="0" />
      <LineId Id="8931" Count="7" />
      <LineId Id="9003" Count="0" />
      <LineId Id="8939" Count="3" />
      <LineId Id="9004" Count="0" />
      <LineId Id="8944" Count="0" />
      <LineId Id="9005" Count="0" />
      <LineId Id="8945" Count="5" />
      <LineId Id="9006" Count="0" />
      <LineId Id="8951" Count="3" />
      <LineId Id="9007" Count="0" />
      <LineId Id="8956" Count="0" />
      <LineId Id="9008" Count="0" />
      <LineId Id="8957" Count="7" />
      <LineId Id="9009" Count="0" />
      <LineId Id="8965" Count="7" />
      <LineId Id="9010" Count="0" />
      <LineId Id="8973" Count="5" />
      <LineId Id="9011" Count="0" />
      <LineId Id="8979" Count="6" />
      <LineId Id="9012" Count="0" />
      <LineId Id="8986" Count="2" />
      <LineId Id="234" Count="0" />
    </LineIds>
    <LineIds Name="FB_HydraulicsControl.close_brake">
      <LineId Id="1" Count="3" />
    </LineIds>
    <LineIds Name="FB_HydraulicsControl.FB_Init">
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_HydraulicsControl.open_brake">
      <LineId Id="1" Count="6" />
    </LineIds>
  </POU>
</TcPlcObject>