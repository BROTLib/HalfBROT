<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.15">
  <POU Name="FB_CoverControl" Id="{febe04fb-b0fe-4b52-a725-1c7655537933}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_CoverControl IMPLEMENTS I_MirrorCovers
VAR_INPUT
	// output signals for opening/closing covers	
	OabOpenCover  AT%Q* : ARRAY[1..3] OF BOOL;	// open cover1-3 command
	OabCloseCover AT%Q* : ARRAY[1..3] OF BOOL;   // close cover1-3 command
END_VAR
VAR_OUTPUT
	bAllOpen			: BOOL;		// all covers are open
	bAllClosed			: BOOL;		// all covers are closed
	bError				: BOOL;		// any cover-driver reports an error
	bWarning			: BOOL;		// warning state of the DC drives
END_VAR
VAR
	fbComm				: I_Comm;
	tonComm 			: TON := (PT:=T#5S);	

	bReset				: BOOL;		// resets all drives after an error has occured
	bOpen				: BOOL;		// open the cover in proper order
	bClose				: BOOL;		// close the cover in proper order

	// limit switches
	IabCoverOpen	AT%I* : ARRAY[1..3] OF BOOL;	// limit coper 1 open switch
	IabCoverClosed	AT%I* : ARRAY[1..3] OF BOOL;	// limit coper 1 closed switch
	
	// status
	abCoverOpen			: ARRAY[1..3] OF BOOL;	// cover is open
	abCoverClosed		: ARRAY[1..3] OF BOOL;	// cover is closed
	abCoverError			: ARRAY[1..3] OF BOOL;	// cover has error
	afbCoverEvent			: ARRAY[1..3] OF FB_EventLog;	// cover event
	afbTimeoutEvent : ARRAY[1..3] OF FB_EventLog;	// cover has timeout
	
	tonCover2OpenDelay		: TON := (PT:=T#1S);	// delay timer for opening cover2
	tonCover3CloseDelay 		: TON := (PT:=T#3S);	// dely timer for closing cover3

	srErrorTrigger			: SR;	// trigger for error
	
	fbCoversOpenedEvent		: FB_EventLog; // log if covers are open
	fbCoversClosedEvent		: FB_EventLog; // log if covers are closed
	fbCoversErrorEvent		: FB_EventLog; // Event log for a generic drive error
	fbCoversWarningEvent	: FB_EventLog; // Event log for a generic drive warning
	
	i	: UINT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*
This is the control for the two (three) telescope covers. 
The correct order for opening is 1->3->2 and for closing 2->3->1.
GVL Open and close signals are inverted
*)

// close has precedence over open
IF bClose THEN
	bOpen := FALSE;
END_IF

// do stuff for all covers
FOR i := 1 TO 3 BY 1 DO
	// limit switches are inverted
    abCoverOpen[i]   := NOT IabCoverOpen[i];
	abCoverClosed[i] := NOT IabCoverClosed[i];
	
	// errors occur if covers are both opened and closed
	abCoverError[i] := abCoverOpen[i] AND abCoverClosed[i];
END_FOR;

// wait for cover2 until cover3 has left the closed state
tonCover2OpenDelay(IN := bOpen AND NOT abCoverClosed[3]);
// wait for cover3 until cover2 has left the open state
tonCover3CloseDelay(IN := bClose AND NOT abCoverOpen[2]);

// commands
IF bClose THEN
	OabCloseCover[1] := IabCoverClosed[1] AND NOT IabCoverClosed[3];
	OabCloseCover[2] := IabCoverClosed[2];
	OabCloseCover[3] := IabCoverClosed[3] AND tonCover3CloseDelay.Q;
ELSIF bOpen THEN
	OabOpenCover[1] := IabCoverOpen[1];
	OabOpenCover[2] := IabCoverOpen[2] AND tonCover2OpenDelay.Q;
	OabOpenCover[3] := IabCoverOpen[3];			
END_IF

// we are open, if all covers are open
bAllOpen := abCoverOpen[1] AND abCoverOpen[2] AND abCoverOpen[3];
// we are closed, if all covers are closed
bAllClosed := abCoverClosed[1] AND abCoverClosed[2] AND abCoverClosed[3];

// error indicates an axis error on any axis
srErrorTrigger(
	SET1 := abCoverError[1] OR abCoverError[2] OR abCoverError[3],
	RESET := bReset,
	Q1 => bError);

IF bAllClosed THEN
	bClose := FALSE;
END_IF

IF bAllOpen THEN
	bOpen := FALSE;
END_IF

fbCoversErrorEvent.OnMessage := 'Cover drive error';
IF bError THEN
	IF abCoverError[3] THEN 
		fbCoversErrorEvent.OnMessage := 'Cover 3 has a drive error.';
	END_IF
	IF abCoverError[2] THEN 
		fbCoversErrorEvent.OnMessage := 'Cover 2 has a drive error.';
	END_IF
	IF abCoverError[1] THEN 
		fbCoversErrorEvent.OnMessage := 'Cover 1 has a drive error.';
	END_IF
END_IF

// send telemetry
tonComm(IN:=TRUE);
IF tonComm.Q THEN // publish new payload every second
	tonComm(IN:=FALSE);
	THIS^._SendTelemetry();	
END_IF

fbCoversErrorEvent(
	Trigger 	:= bError, 
   	Level   	:= ADSLOG_MSGTYPE_ERROR, 
	comm 		:= fbComm);

fbCoversWarningEvent(
	Trigger 	:= bWarning, 
	Level   	:= ADSLOG_MSGTYPE_WARN, 
	comm 		:= fbComm);

// raise an error, if both opened and closed signals are activated
// handle RoboTel differently
afbCoverEvent[1](
	Trigger   	:= abCoverOpen[1] AND abCoverClosed[1],
	Level     	:= ADSLOG_MSGTYPE_ERROR, 
	OnMessage 	:= 'Cover1: limit switch error', 
	comm	 	:= fbComm);

afbCoverEvent[2](
	Trigger   	:= abCoverOpen[2] AND abCoverClosed[2],
    Level     	:= ADSLOG_MSGTYPE_ERROR, 
	OnMessage 	:= 'Cover2: limit switch error', 
	comm      	:= fbComm);

afbCoverEvent[3](
	Trigger   	:= abCoverOpen[3] AND abCoverClosed[3],
	Level     	:= ADSLOG_MSGTYPE_ERROR, 
	OnMessage 	:= 'Cover3: limit switch error', 
	comm 	  	:= fbComm);

//trigger an event, if we encounter a timeout
// handle RoboTel differently
afbTimeoutEvent[1](
	Trigger   	:= FALSE,
	Level     	:= ADSLOG_MSGTYPE_ERROR, 
	OnMessage 	:= 'Cover1: Timeout',
	comm 		:= fbComm);
afbTimeoutEvent[2](
	Trigger   	:= FALSE,
 	Level     	:= ADSLOG_MSGTYPE_ERROR, 
	OnMessage 	:= 'Cover2: Timeout',
	comm 		:= fbComm);
afbTimeoutEvent[3](
	Trigger   	:= FALSE,
	Level     	:= ADSLOG_MSGTYPE_ERROR, 
	OnMessage 	:= 'Cover3: Timeout',
	comm 		:= fbComm);

// Log if we are opened
fbCoversOpenedEvent(
	Trigger   	:= bAllOpen,
	Level     	:= ADSLOG_MSGTYPE_WARN,
	OnMessage 	:= 'All covers are open',
	comm 		:= fbComm);
	
//log if we are closed
fbCoversClosedEvent(
	Trigger   	:= bAllClosed,
	Level     	:= ADSLOG_MSGTYPE_HINT,
	OnMessage 	:= 'All covers are closed',
	comm 		:= fbComm);
]]></ST>
    </Implementation>
    <Method Name="_SendTelemetry" Id="{0a8e627f-9fae-40e1-bd53-318ad436c233}">
      <Declaration><![CDATA[METHOD _SendTelemetry : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF eCoverState = E_MirrorCoverState.closed THEN
	fbComm.Publish('telescope', 'dome', 'AUXILIARY.COVER.REALPOS', '0.0');
ELSIF eCoverState = E_MirrorCoverState.open THEN
	fbComm.Publish('telescope', 'dome', 'AUXILIARY.COVER.REALPOS', '1.0');
ELSE
	fbComm.Publish('telescope', 'dome', 'AUXILIARY.COVER.REALPOS', '0.5');
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Close" Id="{da11c9a0-3757-4491-b03d-01cf2bd99294}">
      <Declaration><![CDATA[METHOD Close : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[bOpen := FALSE;
bClose := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Property Name="Closed" Id="{10ce6f91-e971-45b8-b232-11c8b97ec461}">
      <Declaration><![CDATA[PROPERTY Closed : BOOL]]></Declaration>
      <Get Name="Get" Id="{4c7deb5c-7d43-4aaa-b6d9-bac5da90c9cb}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Closed := bAllClosed;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Error" Id="{f78eaf54-46fe-45ea-8346-6cce4988574f}">
      <Declaration><![CDATA[PROPERTY Error : BOOL]]></Declaration>
      <Get Name="Get" Id="{9055f5d5-0aee-4cfb-b036-00aa938d205d}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Error := bError;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="FB_Init" Id="{f7653641-ffea-4063-9b54-57e57f75d284}">
      <Declaration><![CDATA[//FB_Init is always available implicitly and it is used primarily for initialization.
//The return value is not evaluated. For a specific influence, you can also declare the
//methods explicitly and provide additional code there with the standard initialization
//code. You can evaluate the return value.
METHOD FB_Init: BOOL
VAR_INPUT
    bInitRetains	: BOOL; // TRUE: the retain variables are initialized (reset warm / reset cold)
    bInCopyCode		: BOOL;  // TRUE: the instance will be copied to the copy code afterward (online change)
	comm			: I_Comm;   
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.fbComm := comm;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Open" Id="{bb6e1357-2f21-45f8-bb34-0ba057923977}">
      <Declaration><![CDATA[METHOD Open : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[bOpen := TRUE;
bClose := FALSE;]]></ST>
      </Implementation>
    </Method>
    <Property Name="Opened" Id="{72e486af-133c-4ae8-9633-183e75150cd4}">
      <Declaration><![CDATA[PROPERTY Opened : BOOL]]></Declaration>
      <Get Name="Get" Id="{1b322688-0fb0-4fab-a9f2-be2c04b98dbe}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Opened := bAllOpen;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Reset" Id="{3fcca07c-1b9c-4f16-918b-5d284513a3d3}">
      <Declaration><![CDATA[METHOD Reset : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Reset := TRUE;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_CoverControl">
      <LineId Id="6494" Count="67" />
      <LineId Id="6667" Count="0" />
      <LineId Id="6669" Count="4" />
      <LineId Id="6666" Count="0" />
      <LineId Id="6562" Count="61" />
      <LineId Id="122" Count="0" />
    </LineIds>
    <LineIds Name="FB_CoverControl._SendTelemetry">
      <LineId Id="6" Count="1" />
      <LineId Id="9" Count="3" />
      <LineId Id="8" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_CoverControl.Close">
      <LineId Id="1" Count="1" />
    </LineIds>
    <LineIds Name="FB_CoverControl.Closed.Get">
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_CoverControl.Error.Get">
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_CoverControl.FB_Init">
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_CoverControl.Open">
      <LineId Id="1" Count="1" />
    </LineIds>
    <LineIds Name="FB_CoverControl.Opened.Get">
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_CoverControl.Reset">
      <LineId Id="1" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>