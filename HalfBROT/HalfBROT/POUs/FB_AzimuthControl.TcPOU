<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4026.11">
  <POU Name="FB_AzimuthControl" Id="{fd112fcf-fe5a-48e7-aea8-3fe8a57db212}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_AzimuthControl EXTENDS FB_AxisControl
VAR_INPUT
	bBrakeOpen				: BOOL;		// azimuth break is open
END_VAR
VAR_OUTPUT
END_VAR
VAR
	tonReadyDelay		: TON;		// delay until commutator angle is measured
	homeDelay			: FB_TONTP;
	tonTorqueError		: TON := (PT := T#3S);
	tonRestTimer			: TON;
	bAtRest				: BOOL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* Azimuth Axis control section
Power must be on and brake must be open for the axis to operate
*)

// generate the ready signal after enabling the drive
tonReadyDelay(IN :=  fbAxis.Enable, PT := T#3000MS, Q=> bReady);

// limit the input position angle
fPosition := LIMIT(fMinPosition, fPosition, fMaxPosition);

// conduct the calibrated signal
bCalibrated := fbAxis.Calibrated;

IF bCalibrated OR bError THEN
	bHomeAxis := FALSE;
	bGetLastPosition := FALSE;
END_IF
	
IF bHomeAxis THEN
	fPosition := fCalibPosition;
END_IF

IF homeDelay.Q THEN
	fPosition := fCalibPosition;
	bMoveAxis := TRUE;
END_IF

// perform a recalibration on the last known position
fbAxisCalibration(
	Axis 		:= axisRef,
	Execute 	:= bGetLastPosition AND fLastPosition>=0.0 AND NOT bCalibrated,
	Position 	:= fLastPosition);

IF fbAxisCalibration.Done THEN
	bGetLastPosition := FALSE;
END_IF

IF bCalibrated THEN
	fLastPosition := fActualPosition;
END_IF

// enable the azimuth if not moved by the power chain. Sorry for the hack
tonRestTimer(IN := bBrakeOpen AND (ABS(axisRef.NcToPlc.ActVelo) < 0.01), PT := T#2S);
// if azimuth at rest or calibrated, allow enabling the azimuth
IF tonRestTimer.Q or bCalibrated THEN
	bAtRest := TRUE;
ELSIF NOT bBrakeOpen THEN
	bAtRest := FALSE;
END_IF
	
// deactivate limit switches on homing
MC_SetAcceptBlockedDriveSignal(
	Axis 	:= axisRef, 
	Enable 	:= bHomeAxis);

fbAxis(	
	Enable 			:= bEnable AND bAtRest,
	Reset 			:= bReset,
	MoveAxis 		:= bMoveAxis,
	HomeAxis 		:= bHomeAxis,
	StopAxis 		:= bStopAxis,
	Tracking 		:= bTracking,
	Position 		:= fPosition, 
	Velocity 		:= fVelocity,
	Enable_Positive := inDigitalInputs.1 OR bHomeAxis,
	Enable_Negative := inDigitalInputs.0,
	Jog_Forward 	:= bMovePos,
	Jog_Backwards 	:= bMoveNeg,
	bCalibrationCam := NOT inDigitalInputs.1,
	ActualPosition 	=> fActualPosition,
	Error 			=> bError,
	ErrorID 		=> nErrorID,
	AxisRef 		:= axisRef);

IF bSoEReset THEN
	fLastPosition := -1.0;
	fbSoEReset(
		Axis 	:= axisRef,
		Execute := TRUE,
		Timeout := DEFAULT_ADS_TIMEOUT);
 	IF fbSoEReset.Busy THEN
		fbSoEReset(Axis := axisRef, Execute := FALSE);
	ELSE
		bSoEReset := FALSE;
		bReset := TRUE;
	END_IF
END_IF 

IF fbAxis.MoveDone THEN
	bMoveAxis := FALSE;
END_IF

IF fbAxis.HomeDone THEN
	bHomeAxis := FALSE;
END_IF
	
IF fbAxis.ResetDone THEN
	bReset := FALSE;
END_IF

IF fbAxis.StopDone THEN
	bStopAxis := FALSE;
END_IF
bDiagnosticError := FALSE;
IF inDiagnostic < 16#D012 AND inDiagnostic > 16#D014 THEN
	bDiagnosticError :=TRUE;
	nErrorID := inDiagnostic;
END_IF

fbReadParameter(	
	Axis 			:= axisRef, 
	Enable 			:= fbAxis.InMotion, 
	ParameterNumber := MC_AxisParameter.AxisRemainingTimeToGo, 
	ReadMode 		:= E_ReadMode.READMODE_CYCLIC);
IF fbReadParameter.Valid THEN
	fSlewTime := fbReadParameter.Value;
END_IF

fTorque := inTorque / 10.0;
tonTorqueError(IN := ABS(fTorque) > 50.0);

axisEvent(	
	Trigger 		:= bError, 
	Level 			:= ADSLOG_MSGTYPE_ERROR,
	FormatString 	:= 'Azimuth Axis Error: %s',
	OnMessage 		:= NCError_TO_STRING(nErrorID),
	Comm 			:= fbComm);
	
diagnosticEvent(	
	Trigger 		:= bDiagnosticError,
	Level 			:= ADSLOG_MSGTYPE_ERROR,
	FormatString 	:= 'Azimuth Axis Diagnostic Error: %s',
	OnMessage 		:= NCError_TO_STRING(inDiagnostic),
	Comm 			:= fbComm);
	
TorqueWarning(	
	Trigger 		:= tonTorqueError.Q, 
	Level 			:= ADSLOG_MSGTYPE_WARN,
	FormatString 	:= '%s',
	OnMessage 		:= 'Azimuth torque is high.',
	Comm 			:= fbComm);
	
CalibrationEvent(
	Trigger 		:= bCalibrated, 
	Level 			:= ADSLOG_MSGTYPE_HINT,
	FormatString 	:= '%s',
	OnMessage 		:= 'Azimuth axis is calibrated.',
	Comm 			:= fbComm);
				]]></ST>
    </Implementation>
    <Property Name="InNegLimit" Id="{a36c055b-8818-45be-8689-ba922d90571f}">
      <Declaration><![CDATA[PROPERTY InNegLimit : BOOL]]></Declaration>
      <Get Name="Get" Id="{39319e96-568d-47ed-ab28-d38623bfbe17}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[InNegLimit := NOT inDigitalInputs.0;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="InPosLimit" Id="{d9bd1c8d-6942-4a64-b876-f18e5d0cc4ef}">
      <Declaration><![CDATA[PROPERTY InPosLimit : BOOL]]></Declaration>
      <Get Name="Get" Id="{32263e4b-968c-4ac7-9daa-5086f5a40c25}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[InPosLimit := NOT inDigitalInputs.1;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <LineIds Name="FB_AzimuthControl">
      <LineId Id="7110" Count="147" />
      <LineId Id="149" Count="0" />
    </LineIds>
    <LineIds Name="FB_AzimuthControl.InNegLimit.Get">
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_AzimuthControl.InPosLimit.Get">
      <LineId Id="1" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>