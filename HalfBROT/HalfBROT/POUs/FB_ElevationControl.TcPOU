<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4026.8">
  <POU Name="FB_ElevationControl" Id="{163e8baa-c820-4d82-9b8f-2bab0c8d4398}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_ElevationControl
VAR_INPUT
	bEnable			: BOOL;		// enable the axis
	bReset			: BOOL;		// reset an error
	bUp				: BOOL;		// increase the eleveation
	bDown			: BOOL;		// decrease the elevation
	fPosition		: LREAL;	// set position of the axis in degrees
	fVelocity		: LREAL;	// set the Velocity of the axis
	bMoveAxis		: BOOL;		// move axis command
	bHomeAxis		: BOOL;		// calibrate the axis
	bTracking		: BOOL;		// enable tracking
	bStopAxis		: BOOL;		// stop the Axis
	bSoEReset		: BOOL;		// reset diagnostic errors
	fCalibPosition	: LREAL := 45.0; // // current position of the calibration cam. Apply an offset here if necessary
END_VAR
VAR_OUTPUT
	bReady			: BOOL;		// axis is ready to operate
	bError			: BOOL;		// drive error condition
	bWarning			: BOOL;		// warning condition
	fActualPosition	: LREAL;	// actual position of the elevation axis
	nErrorID			: UDINT;	// error ID of the elevation axis
	bCalibrated		: BOOL;		// axis is calibrated
	fSlewTime		: LREAL;	// time to reach target position
END_VAR
VAR
	fbCover			: I_MirrorCovers;
	fbBrake 		: I_Brake;
	comm			: I_Comm;
	
	InDigitalInputs	AT%I*	: WORD;		// digitale inputs der Endlagen
	InDiagnostic	AT%I*	: UDINT;	// diagnostic number
	InTorque		AT%I*	: INT;		// derotator torque feedback
	IbSTO			AT%I*	: BOOL;		// STO
	axisRef					: AXIS_REF;	
	
	fbAxis					: FB_Axis2;
	fbAxisCalibration			: MC_SetPosition;
	fbSoEReset				: FB_SoEReset;
	// delay until commutator angle is measured
	tonReadyDelay				: TON;
	// disable trigger for hydraulics
	enableTrigger			: F_TRIG;
	// store last position
	bGetLastPosition			: BOOL := TRUE;
	axisEvent				: FB_Eventlog;
	diagnosticEvent			: FB_Eventlog;
	brakeEvent				: FB_Eventlog;
	highElevationEvent		: FB_Eventlog;
	lowElevationEvent		: FB_Eventlog;
	torqueWarning			: FB_EventLog;
	calibrationEvent		: FB_Eventlog;
	
	fTorque					: REAL; 	// elevation torque in percent
	tonTorqueTimer				: TON;		// timer to trigger a warning if torque is high
	dbReadParameter			: MC_ReadParameter;
	bDiagnosticError			: BOOL;
END_VAR
VAR PERSISTENT
	fLastPosition			:	LREAL := -1.0;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// limit the position input to a sane value
fPosition := LIMIT(0.0, fPosition, 90.0);

//if we enable the axis, we have to open the brake first
IF bEnable THEN
	IF NOT bCalibrated THEN
		fbCover.OpenCovers();
		IF fbCover.AreCoversOpen() THEN
			fbBrake.OpenBrake();
		END_IF
	ELSE
		fbBrake.OpenBrake();
	END_IF
	
END_IF

enableTrigger(CLK := bEnable);
// close the brake on the falling edge of the enable signal
IF enableTrigger.Q THEN
	fbBrake.CloseBrake();
END_IF

IF fbAxis.Calibrated OR bError THEN
	bHomeAxis := FALSE;
END_IF

bCalibrated := fbAxis.Calibrated;

IF bHomeAxis THEN
	fPosition := fCalibPosition;
	bMoveAxis := FALSE;
	bTracking := FALSE;
END_IF

IF bMoveAxis THEN
	bTracking := FALSE;
END_IF

// if NOT Enabled and ActVelo>1 then issue a warning
bWarning := NOT bEnable AND axisRef.NcToPlc.ActVelo>2.0;

// deactivate limit switches on homing
MC_SetAcceptBlockedDriveSignal(
	Axis := axisRef, 
	Enable := bHomeAxis);
	
fbAxis(
	Enable 			:= bEnable AND fbBrake.BrakeOpen,
	Reset 			:= bReset,
	MoveAxis 		:= bMoveAxis,
	HomeAxis 		:= bHomeAxis,
	StopAxis 		:= bStopAxis,
	Tracking 		:= bTracking,
	Position 		:= fPosition, 
	Velocity 		:= fVelocity,
	Enable_Positive := inDigitalInputs.0 OR bHomeAxis,
	Enable_Negative := inDigitalInputs.1,
	Jog_Forward 	:= bUp,
	Jog_Backwards 	:= bDown,
	bCalibrationCam := NOT inDigitalInputs.0,
	ActualPosition 	=> fActualPosition,
	Error 			=> bError,
	ErrorID 		=> nErrorID,
	AxisRef 		:= axisRef);

IF fbAxis.MoveDone THEN
	bMoveAxis := FALSE;
END_IF

IF fbAxis.HomeDone THEN
	bHomeAxis := FALSE;
END_IF
	
IF fbAxis.ResetDone THEN
	bReset := FALSE;
END_IF

IF fbAxis.StopDone THEN
	bStopAxis := FALSE;
END_IF

bDiagnosticError := FALSE;
IF inDiagnostic < 16#D012 AND inDiagnostic > 16#D014 THEN
	bDiagnosticError :=TRUE;
	nErrorID := inDiagnostic;
END_IF

fbAxisCalibration(
	Axis 		:= axisRef,
	Execute 	:= bGetLastPosition AND fLastPosition>=0.0 AND NOT bCalibrated,
	Position 	:= fLastPosition);

IF fbAxisCalibration.Done THEN
	bGetLastPosition := FALSE;
END_IF

IF bCalibrated THEN
	fLastPosition := fActualPosition;
END_IF

IF bSoEReset THEN
	fLastPosition := -1.0;
	fbSoEReset(
		Axis := axisRef,
		Execute := TRUE,
		Timeout := DEFAULT_ADS_TIMEOUT);
 	IF NOT fbSoEReset.Busy THEN
		fbSoEReset(Axis := axisRef, Execute := FALSE);
		bSoEReset := FALSE;
		bReset := TRUE;
	END_IF
END_IF 

tonReadyDelay(IN :=  fbBrake.BrakeOpen, PT := T#6000MS, Q=> bReady);

dbReadParameter(	
	Axis 			:= axisRef, 
	Enable 			:= fbAxis.InMotion, 
	ParameterNumber := MC_AxisParameter.AxisRemainingTimeToGo, 
	ReadMode 		:= E_ReadMode.READMODE_CYCLIC);
				
IF dbReadParameter.Valid THEN
	fSlewTime := dbReadParameter.Value;
END_IF

fTorque := inTorque / 10.0;
tonTorqueTimer(IN := ABS(fTorque) > 50.0, PT := T#1000MS);
		
axisEvent(	
	Trigger 		:= bError, 
	Level 			:= ADSLOG_MSGTYPE_ERROR,
	FormatString 	:= 'Elevation Axis Error: %s',
	OnMessage 		:= NCError_TO_STRING(nErrorID), 
	comm 			:= comm);

diagnosticEvent(	
	Trigger 		:= bDiagnosticError,
	Level 			:= ADSLOG_MSGTYPE_ERROR,
	FormatString 	:= 'Elevation Axis Diagnostic Error: %s',
	OnMessage 		:= NCError_TO_STRING(inDiagnostic), 
	comm 			:= comm);

highElevationEvent(	
	Trigger 		:= bCalibrated AND fActualPosition > 85.0, 
	Level 			:= ADSLOG_MSGTYPE_WARN,
	FormatString 	:= 'High Elevation: %s',
	OnMessage 		:= LREAL_TO_FMTSTR(fActualPosition, 2, TRUE), 
	comm 			:= comm);

lowElevationEvent(	
	Trigger 		:= bCalibrated AND fActualPosition < 5.0, 
	Level 			:= ADSLOG_MSGTYPE_WARN,
	FormatString 	:= 'Low Elevation: %s',
	OnMessage 		:= LREAL_TO_FMTSTR(fActualPosition, 2, TRUE), 
	comm 			:= comm);
				
brakeEvent( 
	Trigger 		:= NOT bEnable AND fbBrake.BrakeOpen, 
	Level 			:= ADSLOG_MSGTYPE_WARN,
	FormatString 	:= '%s',
	OnMessage 		:= 'Brake was opened without elevation axis enabled!', 
	comm 			:= comm); 

torqueWarning(	
	Trigger 		:= tonTorqueTimer.Q, 
	Level 			:= ADSLOG_MSGTYPE_WARN,
	FormatString 	:= '%s',
	OnMessage 		:= 'Elevation torque is high.', 
	comm 			:= comm);
	
calibrationEvent(
	Trigger 		:= bCalibrated,
	Level 			:= ADSLOG_MSGTYPE_HINT,
	OnMessage 		:= 'Elevation is calibrated.', 
	comm 			:= comm);]]></ST>
    </Implementation>
    <Method Name="FB_Init" Id="{413b7b7f-fbba-45b5-beca-2a08218d35d1}">
      <Declaration><![CDATA[//FB_Init is always available implicitly and it is used primarily for initialization.
//The return value is not evaluated. For a specific influence, you can also declare the
//methods explicitly and provide additional code there with the standard initialization
//code. You can evaluate the return value.
METHOD FB_Init: BOOL
VAR_INPUT
    bInitRetains	: BOOL; // TRUE: the retain variables are initialized (reset warm / reset cold)
    bInCopyCode		: BOOL;  // TRUE: the instance will be copied to the copy code afterward (online change)
	cover			: I_MirrorCovers;
	brake			: I_Brake;
	comm			: I_Comm;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.fbBrake := brake;
THIS^.fbCover := cover;
THIS^.comm := comm;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_ElevationControl">
      <LineId Id="7785" Count="173" />
      <LineId Id="170" Count="0" />
    </LineIds>
    <LineIds Name="FB_ElevationControl.FB_Init">
      <LineId Id="1" Count="2" />
    </LineIds>
  </POU>
</TcPlcObject>