<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4026.11">
  <POU Name="FB_ElevationControl" Id="{163e8baa-c820-4d82-9b8f-2bab0c8d4398}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_ElevationControl EXTENDS FB_AxisControl
VAR_INPUT
	bUp				: BOOL;		// increase the eleveation
	bDown			: BOOL;		// decrease the elevation
	
	fbCovers		: I_MirrorCovers;
	fbBrake			: I_Brake;
END_VAR
VAR_OUTPUT
	bWarning			: BOOL;		// warning condition
END_VAR
VAR
	tonReadyDelay			: TON;	// delay until commutator angle is measured
	enableTrigger			: F_TRIG;	// disable trigger for hydraulics
	brakeEvent				: FB_Eventlog;
	highElevationEvent		: FB_Eventlog;
	lowElevationEvent		: FB_Eventlog;
	tonTorqueTimer				: TON;		// timer to trigger a warning if torque is high
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// limit the position input to a sane value
fPosition := LIMIT(0.0, fPosition, 90.0);

//if we enable the axis, we have to open the brake first
IF bEnable THEN
	IF NOT bCalibrated THEN
		fbCovers.Open();
		IF fbCovers.Opened THEN
			fbBrake.OpenBrake();
		END_IF
	ELSE
		fbBrake.OpenBrake();
	END_IF
	
END_IF

enableTrigger(CLK := bEnable);
// close the brake on the falling edge of the enable signal
IF enableTrigger.Q THEN
	fbBrake.CloseBrake();
END_IF

IF fbAxis.Calibrated OR bError THEN
	bHomeAxis := FALSE;
END_IF

bCalibrated := fbAxis.Calibrated;

IF bHomeAxis THEN
	fPosition := fCalibPosition;
	bMoveAxis := FALSE;
	bTracking := FALSE;
END_IF

IF bMoveAxis THEN
	bTracking := FALSE;
END_IF

// if NOT Enabled and ActVelo>1 then issue a warning
bWarning := NOT bEnable AND axisRef.NcToPlc.ActVelo>2.0;

// deactivate limit switches on homing
MC_SetAcceptBlockedDriveSignal(
	Axis := axisRef, 
	Enable := bHomeAxis);
	
fbAxis(
	Enable 			:= bEnable AND fbBrake.BrakeOpen,
	Reset 			:= bReset,
	MoveAxis 		:= bMoveAxis,
	HomeAxis 		:= bHomeAxis,
	StopAxis 		:= bStopAxis,
	Tracking 		:= bTracking,
	Position 		:= fPosition, 
	Velocity 		:= fVelocity,
	Enable_Positive := inDigitalInputs.0 OR bHomeAxis,
	Enable_Negative := inDigitalInputs.1,
	Jog_Forward 	:= bUp,
	Jog_Backwards 	:= bDown,
	bCalibrationCam := NOT inDigitalInputs.0,
	ActualPosition 	=> fActualPosition,
	Error 			=> bError,
	ErrorID 		=> nErrorID,
	AxisRef 		:= axisRef);

IF fbAxis.MoveDone THEN
	bMoveAxis := FALSE;
END_IF

IF fbAxis.HomeDone THEN
	bHomeAxis := FALSE;
END_IF
	
IF fbAxis.ResetDone THEN
	bReset := FALSE;
END_IF

IF fbAxis.StopDone THEN
	bStopAxis := FALSE;
END_IF

bDiagnosticError := FALSE;
IF inDiagnostic < 16#D012 AND inDiagnostic > 16#D014 THEN
	bDiagnosticError :=TRUE;
	nErrorID := inDiagnostic;
END_IF

fbAxisCalibration(
	Axis 		:= axisRef,
	Execute 	:= bGetLastPosition AND fLastPosition>=0.0 AND NOT bCalibrated,
	Position 	:= fLastPosition);

IF fbAxisCalibration.Done THEN
	bGetLastPosition := FALSE;
END_IF

IF bCalibrated THEN
	fLastPosition := fActualPosition;
END_IF

IF bSoEReset THEN
	fLastPosition := -1.0;
	fbSoEReset(
		Axis := axisRef,
		Execute := TRUE,
		Timeout := DEFAULT_ADS_TIMEOUT);
 	IF NOT fbSoEReset.Busy THEN
		fbSoEReset(Axis := axisRef, Execute := FALSE);
		bSoEReset := FALSE;
		bReset := TRUE;
	END_IF
END_IF 

tonReadyDelay(IN :=  fbBrake.BrakeOpen, PT := T#6000MS, Q=> bReady);

fbReadParameter(	
	Axis 			:= axisRef, 
	Enable 			:= fbAxis.InMotion, 
	ParameterNumber := MC_AxisParameter.AxisRemainingTimeToGo, 
	ReadMode 		:= E_ReadMode.READMODE_CYCLIC);
				
IF fbReadParameter.Valid THEN
	fSlewTime := fbReadParameter.Value;
END_IF

fTorque := inTorque / 10.0;
tonTorqueTimer(IN := ABS(fTorque) > 50.0, PT := T#1000MS);
		
axisEvent(	
	Trigger 		:= bError, 
	Level 			:= ADSLOG_MSGTYPE_ERROR,
	FormatString 	:= 'Elevation Axis Error: %s',
	OnMessage 		:= NCError_TO_STRING(nErrorID), 
	comm 			:= fbComm);

diagnosticEvent(	
	Trigger 		:= bDiagnosticError,
	Level 			:= ADSLOG_MSGTYPE_ERROR,
	FormatString 	:= 'Elevation Axis Diagnostic Error: %s',
	OnMessage 		:= NCError_TO_STRING(inDiagnostic), 
	comm 			:= fbComm);

highElevationEvent(	
	Trigger 		:= bCalibrated AND fActualPosition > 85.0, 
	Level 			:= ADSLOG_MSGTYPE_WARN,
	FormatString 	:= 'High Elevation: %s',
	OnMessage 		:= LREAL_TO_FMTSTR(fActualPosition, 2, TRUE), 
	comm 			:= fbComm);

lowElevationEvent(	
	Trigger 		:= bCalibrated AND fActualPosition < 5.0, 
	Level 			:= ADSLOG_MSGTYPE_WARN,
	FormatString 	:= 'Low Elevation: %s',
	OnMessage 		:= LREAL_TO_FMTSTR(fActualPosition, 2, TRUE), 
	comm 			:= fbComm);
				
brakeEvent( 
	Trigger 		:= NOT bEnable AND fbBrake.BrakeOpen, 
	Level 			:= ADSLOG_MSGTYPE_WARN,
	FormatString 	:= '%s',
	OnMessage 		:= 'Brake was opened without elevation axis enabled!', 
	comm 			:= fbComm); 

torqueWarning(	
	Trigger 		:= tonTorqueTimer.Q, 
	Level 			:= ADSLOG_MSGTYPE_WARN,
	FormatString 	:= '%s',
	OnMessage 		:= 'Elevation torque is high.', 
	comm 			:= fbComm);
	
calibrationEvent(
	Trigger 		:= bCalibrated,
	Level 			:= ADSLOG_MSGTYPE_HINT,
	OnMessage 		:= 'Elevation is calibrated.', 
	comm 			:= fbComm);]]></ST>
    </Implementation>
    <Method Name="FB_Init" Id="{413b7b7f-fbba-45b5-beca-2a08218d35d1}">
      <Declaration><![CDATA[//FB_Init is always available implicitly and it is used primarily for initialization.
//The return value is not evaluated. For a specific influence, you can also declare the
//methods explicitly and provide additional code there with the standard initialization
//code. You can evaluate the return value.
METHOD FB_Init: BOOL
VAR_INPUT
    bInitRetains	: BOOL; // TRUE: the retain variables are initialized (reset warm / reset cold)
    bInCopyCode		: BOOL;  // TRUE: the instance will be copied to the copy code afterward (online change)
	comm			: I_Comm;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.fbComm := comm;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_ElevationControl">
      <LineId Id="7785" Count="173" />
      <LineId Id="170" Count="0" />
    </LineIds>
    <LineIds Name="FB_ElevationControl.FB_Init">
      <LineId Id="3" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>