<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4026.8">
  <POU Name="FB_DerotatorControl" Id="{acfc3cc1-a4bd-4873-ba58-50b0c54d8bf5}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_DerotatorControl EXTENDS FB_AxisControl
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	tonTorqueError		: TON := (PT := T#3S);	// trigger for the torque error
	bLeft			: BOOL;		// decrease derotator angle
	bRight			: BOOL;		// increase derotator angle
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*
Selection 6
Homing in Endlage:

https://infosys.beckhoff.com/index.php?content=../content/1031/ax5000_usermanual/html/ax5000_homing_hardware_end_position.htm&id=12221
NC-Interface:
PlcToNc-Achsinterface, Bit 8 namens AcceptBlockedDriveSignal im nDeCtrlDWord

SPS-Interface:
TcNc-Lib, siehe SPS-Funktion AxisSetAcceptBlockedDriveSignal in der TwinCAT  PLC Library: NC.
*)

fPosition := LIMIT(fMinPosition, fPosition, fMaxPosition);

IF bEnable AND NOT fbAxis.Calibrated THEN
	bHomeAxis := TRUE;
END_IF

IF fbAxis.Calibrated THEN
	bHomeAxis := FALSE;
	bCalibrated := fbAxis.Calibrated;
END_IF
	
IF bHomeAxis THEN
	fPosition := fCalibPosition;
END_IF

fbAxis(
	enable 			:= bEnable,
	Reset 			:= bReset,
	MoveAxis 		:= bMoveAxis,
	HomeAxis 		:= bHomeAxis,
	StopAxis 		:= bStopAxis,
	HomingMode 		:= MC_ForceCalibration,
	Position 		:= fPosition, 
	Velocity 		:= fVelocity,
	Enable_Positive := NOT inDigitalInputs.0,
	Enable_Negative := NOT inDigitalInputs.1,
	Jog_Forward 	:= bRight,
	Jog_Backwards 	:= bLeft,
	bCalibrationCam := inDigitalInputs.0,
	isModuloAxis 	:= FALSE,
	Tracking 		:= bTracking,
	ActualPosition 	=> fActualPosition,
	Error 			=> bError,
	ErrorID 		=> nErrorID,
	AxisRef 		:= axisRef);
	
IF fbAxis.MoveDone OR bReset OR bError THEN
	bMoveAxis := FALSE;
END_IF

IF fbAxis.HomeDone OR bReset OR bError THEN
	bHomeAxis := FALSE;
END_IF
	
IF fbAxis.ResetDone THEN
	bReset := FALSE;
END_IF

IF fbAxis.StopDone THEN
	bStopAxis := FALSE;
END_IF

bDiagnosticError := FALSE;
IF inDiagnostic < 16#D012 AND inDiagnostic > 16#D014 THEN
	bDiagnosticError := TRUE;
	nErrorID := inDiagnostic;
	bSoeReset := bReset;
END_IF

bReady := fbAxis.Ready;

fbReadParameter(	
	Axis 			:= axisRef, 
	Enable 			:= fbAxis.InMotion, 
	ParameterNumber := MC_AxisParameter.AxisRemainingTimeToGo, 
	ReadMode 		:= E_ReadMode.READMODE_CYCLIC);
				
IF fbReadParameter.Valid THEN
	fSlewTime := fbReadParameter.Value;
END_IF

IF bSoEReset THEN
	fbSoEReset(
		Axis 	:= axisRef,
		Execute := TRUE,
		Timeout := DEFAULT_ADS_TIMEOUT);
 	IF NOT fbSoEReset.Busy THEN
		fbSoEReset(Axis := axisRef, Execute := FALSE);
		bSoEReset := FALSE;
		bReset := TRUE;
	END_IF
END_IF

fTorque := inTorque / 10.0;
// nominal torque is 3%, max is 25%
tonTorqueError(IN := ABS(fTorque) > 20.0);

axisEvent(	
	Trigger 		:= bError, 
	Level 			:= ADSLOG_MSGTYPE_ERROR,
	FormatString	:= 'Derotator Axis Error: %s',
	OnMessage 		:= NCError_TO_STRING(nErrorID),
	OffMEssage 		:= 'OK',
	OffLevel 		:= ADSLOG_MSGTYPE_HINT,
	Comm			:= fbComm);
	
diagnosticEvent(	
	Trigger 		:= bDiagnosticError, 
	Level 			:= ADSLOG_MSGTYPE_ERROR,
	FormatString	:= 'Derotator Axis Diagnostic Error: %s',
	OnMessage 		:= NCError_TO_STRING(inDiagnostic),
	Comm			:= fbComm);
	
TorqueWarning(	
	Trigger 		:= tonTorqueError.Q, 
	Level 			:= ADSLOG_MSGTYPE_WARN,
	FormatString 	:= '%s',
	OnMessage 		:= 'Derotator torque is high.',
	Comm			:= fbComm);

CalibrationEvent(	
	Trigger 		:= bCalibrated, 
	Level 			:= ADSLOG_MSGTYPE_HINT,
	OnMessage 		:= 'Derotator is calibrated.',
	Comm			:= fbComm);
	]]></ST>
    </Implementation>
    <Method Name="FB_Init" Id="{17d81d64-5647-49eb-8f39-4de9c4a6dd83}">
      <Declaration><![CDATA[//FB_Init is always available implicitly and it is used primarily for initialization.
//The return value is not evaluated. For a specific influence, you can also declare the
//methods explicitly and provide additional code there with the standard initialization
//code. You can evaluate the return value.
METHOD FB_Init: BOOL
VAR_INPUT
    bInitRetains	: BOOL; // TRUE: the retain variables are initialized (reset warm / reset cold)
    bInCopyCode		: BOOL;  // TRUE: the instance will be copied to the copy code afterward (online change)
	comm			: I_Comm;   
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.fbComm := comm;]]></ST>
      </Implementation>
    </Method>
    <Method Name="IsInMaxLimit" Id="{85224394-9a32-4685-b3cf-6a13bc098736}">
      <Declaration><![CDATA[METHOD PUBLIC IsInMaxLimit : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IsInMaxLimit := inDigitalInputs.0;]]></ST>
      </Implementation>
    </Method>
    <Method Name="IsInMinLimit" Id="{62606f0a-fd18-40f4-8386-8e94886290d7}">
      <Declaration><![CDATA[METHOD PUBLIC IsInMinLimit : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IsInMinLimit := inDigitalInputs.1;]]></ST>
      </Implementation>
    </Method>
    <Method Name="IsReady" Id="{8cc15e49-347f-420a-b869-3556a24cdf75}">
      <Declaration><![CDATA[METHOD PUBLIC IsReady : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IsReady := bReady;]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoveLeft" Id="{f9da8fce-1e75-499f-9e0c-b87953d543dc}">
      <Declaration><![CDATA[METHOD PUBLIC MoveLeft : BOOL
VAR_INPUT
	enable	: BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[bLeft := enable;]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoveRight" Id="{36c00668-a0dc-4b1f-8735-c26e99bf4c2c}">
      <Declaration><![CDATA[METHOD PUBLIC MoveRight : BOOL
VAR_INPUT
	enable	: BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[bRight := enable;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_DerotatorControl">
      <LineId Id="4057" Count="126" />
      <LineId Id="127" Count="0" />
    </LineIds>
    <LineIds Name="FB_DerotatorControl.FB_Init">
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_DerotatorControl.IsInMaxLimit">
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_DerotatorControl.IsInMinLimit">
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_DerotatorControl.IsReady">
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_DerotatorControl.MoveLeft">
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_DerotatorControl.MoveRight">
      <LineId Id="1" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>