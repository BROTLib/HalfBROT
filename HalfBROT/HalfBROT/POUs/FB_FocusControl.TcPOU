<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4026.8">
  <POU Name="FB_FocusControl" Id="{27922653-650e-4327-85ba-374d2f945b2c}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_FocusControl
VAR_INPUT
	enable			: BOOL;		// enable the axis
	inward			: BOOL;		// Move M2 closer to M1
	outward			: BOOL;		// Move M2 away from M1	
	reset			: BOOL;		// reset the axis(-error)
	MoveAxis		: BOOL;		// move the axis to new position
	HomeAxis		: BOOL;		// calibrate the focus axis
	position		: LREAL;	// focus position in millimeters
	telescope_mode	: E_TelescopeMode;
	comm			: I_Comm;
END_VAR
VAR_OUTPUT
	Calibrated		: BOOL;		// true if absolute calibration
	Error			: BOOL;		// true if error
	ErrorID			: UDINT;	// ID of NC axis error
	Ready			: BOOL;		// ready signal = drive ready + standstill
	FocusUnlock	AT%Q*: BOOL;		// whether focus is unlocked
END_VAR
VAR
	FocusDelay		: TON;
	BrakeDelay		: TON;
	FocusAxis		: FB_Axis2;
	actual_position	: LREAL;
	ManualUnlock	: BOOL;		// manual override to unlock the focus
	FocusUnlocked	: BOOL;
	MQTTTimer 		: TON := (PT:=T#5S);
	//getlastposition:	BOOL := TRUE;
	FocusAxisEvent	: FB_EventLog;
	CalibrationEvent: FB_EventLog;
	HomingMode		: MC_HOMINGMODE := 		MC_DefaultHoming;
	SetPosition		: MC_SetPosition;
	
	focus_limit_near	AT%I*: BOOL;	// DIN29 3.4
	focus_limit_far		AT%I*: BOOL;	// DIN30 3.5
	FocusAxisRef		: AXIS_REF;
END_VAR
VAR CONSTANT
	// reference position for homing
	homing_position	: LREAL := 92.8936; // 106.5936 - 13.7000
	tolerance		: LREAL := 0.005;
END_VAR
VAR PERSISTENT
	last_position	: LREAL := -1.0;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*
Focus Control Unit
spindle gear: 5mm
brake: 86 61103H00 Var. 0005 Index C; 24VDC geglattet 0,25 A P1672/R7
motor: Faulhaber ; Schönaich ; 3557K024CR; 454  431 ; Made in germany ==> 5300 rpm
gear: Faulhaber ; MINIMOTOR SA ; swiss made ; 38/1S  43:1 ; 033896  503
Focus is locked by default
70,8W; 0,100A no load current; 2,0 Terminal resistance; 1,950A max Current 
*)

// limit to sane positions
position := LIMIT(5.0, position, 95.0);

// focus is unlocked if enabled or manually unlocked
FocusUnlock := ManualUnlock OR enable;

// wait until the focus is unlocked for n milliseconds
FocusDelay(IN := FocusUnlock, PT := T#500MS, Q => FocusUnlocked);
// wait for brake until we are at rest
BrakeDelay(IN := NOT FocusAxis.Busy AND FocusAxis.StandStill, PT := T#4000MS);

// if we are on automatic mode then position the focus
IF telescope_mode = E_TelescopeMode.automatic AND NOT ManualUnlock THEN
	IF FocusAxis.Calibrated THEN
		IF ABS(position - actual_position) > tolerance THEN
			IF FocusAxis.Ready THEN
				MoveAxis := TRUE;
			ELSE
				Enable := TRUE;
			END_IF
		END_IF
		// disable the drive and lock the brake, if we stand for more than n seconds
		IF BrakeDelay.Q THEN
			Enable := FALSE;
		END_IF
		// store actual position, if we are calibrated and locked
		IF NOT FocusUnlock THEN
			last_position := actual_position;
		END_IF
	ELSE // not calibrated
		IF FocusAxis.Ready THEN
			HomeAxis := TRUE;
		END_IF
	END_IF
END_IF

IF HomeAxis THEN
	IF last_position > 0.0 THEN
		HomingMode := MC_ForceCalibration; // MC_Direct
		position := last_position;
		SetPosition.Execute := TRUE;
	ELSE
		HomingMode := MC_DefaultHoming;
		position := homing_position;
		SetPosition.Execute := FALSE;
	END_IF
ELSE
	SetPosition.Execute := FALSE;	
END_IF

// deactivate limit switches on homing
MC_SetAcceptBlockedDriveSignal(Axis := FocusAxisRef, Enable := HomeAxis);
SetPosition(Axis := FocusAxisRef, Position := last_position);
		
FocusAxis(	
	Enable 			:= FocusUnlocked,
	Reset 			:= reset,
	MoveAxis 		:= MoveAxis AND FocusUnlocked,
	HomeAxis 		:= HomeAxis AND FocusUnlocked,
	HomingMode 		:= HomingMode,
	Position 		:= position,
	Velocity 		:= 1.0,
	Enable_Positive := NOT focus_limit_far OR HomeAxis,
	Enable_Negative := NOT focus_limit_near,
	Jog_Forward 	:= outward AND FocusUnlocked,
	Jog_Backwards 	:= inward AND FocusUnlocked,
	bCalibrationCam := focus_limit_far,
	ActualPosition 	=> actual_position,
	Error 			=> error,
	ErrorID 		=> ErrorID,
	AxisRef 		:= FocusAxisRef);	

IF FocusAxis.MoveDone THEN
	MoveAxis := FALSE;
END_IF

IF FocusAxis.HomeDone THEN
	HomeAxis := FALSE;
	Enable := FALSE;
	last_position := position;
END_IF
	
IF FocusAxis.ResetDone THEN
	reset := FALSE;
END_IF

IF FocusAxis.Calibrated OR Error THEN
	HomeAxis := FALSE;
END_IF

IF Error THEN
	last_position := -1.0;
	//FocusAxis.Calibrated := FALSE;
	Calibrated := FALSE;
END_IF

Calibrated := FocusAxis.Calibrated;

Ready := FocusAxis.Ready AND FocusAxis.StandStill OR NOT FocusUnlock;

MQTTTimer(IN:=TRUE);
IF MQTTTimer.Q THEN // publish new payload every second
	MQTTTimer(IN:=FALSE);
	comm.Publish('telescope', 'dome', 'FocusPosition', LREAL_TO_FMTSTR(actual_position, 5, TRUE));
	comm.Publish('telescope', 'dome', 'FocusCalibrated', BOOL_TO_STRING(Calibrated));	
	comm.Publish('telescope', 'dome', 'FocusReady', BOOL_TO_STRING(Ready));	
END_IF

FocusAxisEvent(	
	Trigger := 		FocusAxis.Error, 
	Level := 		ADSLOG_MSGTYPE_ERROR,
	FormatString :=	'Focus Axis Error: %s',
	OnMessage := 	NCError_TO_STRING(ErrorID),
	OffMEssage := 	'OK',
	OffLevel := 	ADSLOG_MSGTYPE_HINT,
	comm := comm);

CalibrationEvent(
	Trigger :=	Calibrated,
	Level :=	ADSLOG_MSGTYPE_HINT,
	OnMessage := 'Focus is calibrated.',
	comm := comm);]]></ST>
    </Implementation>
    <LineIds Name="FB_FocusControl">
      <LineId Id="1" Count="131" />
    </LineIds>
  </POU>
</TcPlcObject>